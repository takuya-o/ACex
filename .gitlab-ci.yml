# -*- coding: utf-8 -*-
image: alpine:latest

variables:
  DOCKER_DRIVER: overlay2

  #Dependency Scan remote is  ULTIMATE GOLD only Gemnasiumでのライブラリ脆弱性
  DEP_SCAN_DISABLE_REMOTE_CHECKS: local
  GITLAB_FEATURES: "$GITLAB_FEATURES container_scanning dependency_scanning license_scanning sast "

stages:
  - build
  - test
  - deploy # for Pages # dummy stage to follow the template guidelines
#  - review
  - dast
#  - staging
#  - canary
#  - production
#  - incremental rollout 10%
#  - incremental rollout 25%
#  - incremental rollout 50%
#  - incremental rollout 100%
#  - performance
#  - cleanup


include:
  - template: Jobs/Build.gitlab-ci.yml
#  - template: Jobs/Test.gitlab-ci.yml
  - template: Jobs/Code-Quality.gitlab-ci.yml
#  - template: Jobs/Deploy.gitlab-ci.yml
#  - template: Jobs/Browser-Performance-Testing.gitlab-ci.yml
#  - template: Security/DAST.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml

build: #上書きと追加項目
  image: "node:alpine" #11.10.1-alpine <- alpine:2.9
  tags:
  - Docker
  services:
  script:
  - |
    function install_crxmake() {
      apk add --no-cache ruby
      export PATH=`gem environment gempath|sed 's/:.*$//'`/bin:$PATH
      gem install --user-install --no-document crxmake  #ruby-rdocパッケージいれず-no-..
    }
    function build() {
      #npm WARN tar ENOENT: no such file or directory,でACexでは動かない
      #npm install
      #cp -p node_modules/jquery/dist/jquery.min.js src/lib/
      #./node_modules/.bin/tsc
      install_crxmake
      if [ -z "$PRIVATE_KEY" ];then
        unofficial_build
      else
        cp "$PRIVATE_KEY" src.pem
        offical_build
      fi
    }
    function unofficial_build() {
      crxmake --pack-extension="src" --zip-output="${CI_PROJECT_NAME}.zip" \
      --key-output=src-tmp.pem  \
      --ignore-file="/(\.swp|.*~)/" --ignore-dir="/\.(?:svn|git|cvs)/" --verbose
      #DEBUG用に .tsと.map 含めておく
    }
    function offical_build() {
      ./build.rb
    }
    build
  artifacts:
    paths:
    - ${CI_PROJECT_NAME}.zip

code_quality:  #STARTER BRONZE->CORE FREE
  tags: #追加項目
  - DinD

container_scanning: #Docker image形式を検査する
  tags: #追加項目
  - DinD
  artifacts:
#    reports:
#      container_scanning: gl-container-scanning-report.json
    expose_as: 'Container Scanning Report JSON'
    paths:
      - gl-container-scanning-report.json

dependency_scanning:  #ULTIMATE GOLD
  tags: #追加項目
  - DinD
#  script:
#    - cat gl-dependency-scanning-report.json #Defaultで出力済み
  artifacts:
    expose_as: "Dependency JSON"
    paths: [ "gl-dependency-scanning-report.json" ]

license_scanning: #ULTIMATE GOLD
  tags: #追加項目
  - DinD
#  script: #置換え catでwrite errorがでる
#    - /run.sh analyze .
#    - cat $LM_REPORT_FILE #for CE defaultで出ない?
  artifacts:
    expose_as: "License Scanning Report"
    paths: [ "gl-license-scanning-report.html", $LM_REPORT_FILE ]

sast: #ULTIMATE GOLD->CORE FREE(ESLint)
  tags: #追加項目
  - DinD


#のこりのテストはreviewが必要
# dast:
# performance:

cov-test:
  image: "node:alpine" #15.5.0-alpine3.11
  stage: test
  script:
    - npm install
    - node_modules/.bin/npx nyc --reporter cobertura mocha
  artifacts:
    reports:
      cobertura: coverage/cobertura-coverage.xml
  rules:
    - if: '$TEST_DISABLED'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'
      
pages:
  stage: deploy
  script:
  - mkdir .public
  - cp -r -p
        gl-code-quality-report.json
        gl-container-scanning-report.json
        gl-dependency-scanning-report.json
        gl-license-scanning-report.html $LM_REPORT_FILE
        gl-sast-report.json
        .public/ || true
  - echo "<html><header><title>CI Reports ${CI_JOB_ID}</title></header><body>
          <ul>" >index.html
  - (cd .public;
      for file in *;
      do echo '<li><a href="'$file'">'$file'</a></li>';
      done ) >>index.html
  - echo '</ul>
          </body></html>' >>index.html
  - mv index.html .public
  - mv .public public
  artifacts:
    expose_as: "CI Reports"
    paths:
    - public
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'


#コードインテリジェンス https://docs.gitlab.com/ee/user/project/code_intelligence.html
code_navigation:
  allow_failure: true
  script:
  - |
    apk add --no-cache go git
    export GOPATH="$HOME/go"
    export PATH="$GOPATH/bin:$PATH"
    go get github.com/sourcegraph/lsif-go/cmd/lsif-go
    lsif-go
  artifacts:
    reports:
      lsif: dump.lsif

# ---------------------------------------------------------------------------
.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x

before_script:
  - *auto_devops
